import { Column } from "../types/column";
import { IntColumn } from "../types/int-column";
import { StringColumn } from "../types/string.column";
import { ForeignColumn } from "../types/foreign.column";
export declare class Blueprint {
    private columns;
    private contraints;
    year(name: string): void;
    uuid(name: string): void;
    unsignedTinyInteger(name: string): void;
    unsignedSmallInteger(name: string): void;
    unsignedMediumInteger(name: string): void;
    unsignedInteger(name: string): IntColumn;
    unsignedDecimal(name: string, length?: number, decimalLength?: number): void;
    unsignedBigInteger(name: string): void;
    tinyInteger(name: string): void;
    tinyIncrements(name: string): void;
    timestampsTz(): void;
    timestamps(): void;
    timestampTz(name: string): void;
    timestamp(name: string): void;
    timeTz(name: string): void;
    time(name: string): void;
    text(nam: string): void;
    smallInteger(name: string): void;
    smallIncrements(name: string): void;
    mediumText(name: string): void;
    mediumInteger(name: string): void;
    mediumIncrements(name: string): void;
    longText(name: string): void;
    integer(name: string): IntColumn;
    float(name: string, length?: number, decimalLength?: number): void;
    double(name: string, length?: number, decimalLength?: number): void;
    decimal(name: string, length?: number, decimalLength?: number): void;
    dateTimeTz(name: string): void;
    dateTime(name: string): void;
    date(name: string): void;
    char(name: string): void;
    boolean(name: string): void;
    bigInteger(name: string): void;
    bigIncrements(name: string): void;
    foreignId(name: string): void;
    id(): IntColumn;
    string(name: string, length?: number): StringColumn;
    increments(name: string): IntColumn;
    column(name: string, type: string): void;
    getConstraints(): ForeignColumn[];
    getColumns(): Column[];
}
